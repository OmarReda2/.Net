@model IEnumerable<EmployeeViewModel> 
@{
    ViewData["Title"] = "Index";
}

<h1>All Employees</h1>
<br />
<br />
<a asp-action="Create" asp-controller="Employee" class="btn btn-primary">Create New Employee</a>
<br />
<br />

<form class="my-3" asp-action="Index" >
    <div class="row">
        <div class="col-sm-8">
            <input placeholder="Search By Name" name="SearchValue" class="form-control">  '
            @*
                - the attribute name="SearchValue" would be passed as parameter in index actioin as it has the value for the input
                - it should be the same name in the parameter
            *@
        </div>
        <div class="col-sm-2">
            <input type="submit" value="Search" name="SearchValue" class="btn btn-info btn-block"> 
        </div>
        <div class="col-sm-2"> </div>

    </div>
</form>



@if (Model.Count() > 0) 
{
    <table class="table table-striped tabel-hover">
        <thead>
            <th>@Html.DisplayNameFor(E => E.Name)</th>
            <th>@Html.DisplayNameFor(E => E.ImageName)</th>
            <th>@Html.DisplayNameFor(E => E.Age)</th>
            <th>@Html.DisplayNameFor(E => E.Salary)</th>
            <th>@Html.DisplayNameFor(E => E.Email)</th>
            <th>@Html.DisplayNameFor(E => E.Department)</th>
            <th>@Html.DisplayNameFor(E => E.PhoneNumber)</th>
            <th>@Html.DisplayNameFor(E => E.IsActive)</th>
            <th>@Html.DisplayNameFor(E => E.HireDate)</th>
            <th>Detail</th>
            <th>Update</th>
            <th>Delete</th>
        </thead>

        <tbody>
            @foreach (var employee in Model)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>
                        <img src="~/files/Imgs/@employee.ImageName" class="img-fluid rounded" height="40" width="40" alt="Employee Name">
                    </td>
                    <td>@employee.Age</td>
                    @*<td>@employee.Salary</td>*@
                    <td>@Html.DisplayFor(M => @employee.Salary)</td>
                    <td>@Html.DisplayFor(M => @employee.Email)</td>
                    <td>@employee.Department?.Name</td> @*we will use eager loading(why?see the notes) in GetAll() in GenericRepo.*@
                    <td>@Html.DisplayFor(M => @employee.PhoneNumber)</td>
                    <td>@Html.DisplayFor(M => @employee.IsActive)</td>
                    <td>@Html.DisplayFor(M => @employee.HireDate)</td>
                    <partial name="_ButtonsPartialView" model="@employee.Id"> 
                </tr>

            }
        </tbody>
    </table>
}
else{
    <div class="alert alert-warning">
        <p>There is No Employee!</p>
    </div>
}

